# Generated by Django 5.1.2 on 2024-10-29 20:11

import accounts.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(error_messages={'blank': 'İstifadəçi adı sahəsi boş qala bilməz.', 'max_length': 'İstifadəçi adı ən çox 20 simvol olmalıdır.', 'null': 'İstifadəçi adı sahəsi boş qala bilməz.', 'unique': 'Bu istifadəçi adı artıq götürülüb.'}, max_length=20, unique=True)),
                ('first_name', models.CharField(error_messages={'blank': 'Ad sahəsi boş qala bilməz.', 'max_length': 'Ad ən çox 30 simvol olmalıdır.', 'null': 'Ad sahəsi boş qala bilməz.'}, max_length=30)),
                ('last_name', models.CharField(error_messages={'blank': 'Soyad sahəsi boş qala bilməz.', 'max_length': 'Soyad ən çox 30 simvol olmalıdır.', 'null': 'Soyad sahəsi boş qala bilməz.'}, max_length=30)),
                ('email', models.EmailField(error_messages={'blank': 'E-posta sahəsi boş qala bilməz.', 'invalid': 'Keçərli bir e-posta ünvanı daxil edin.', 'max_length': 'E-posta ən çox 50 simvol olmalıdır.', 'null': 'E-posta sahəsi boş qala bilməz.'}, max_length=50, unique=True)),
                ('phone_number', models.CharField(blank=True, error_messages={'blank': 'Telefon nömrəsi sahəsi boş qala bilər.', 'invalid': 'Keçərli bir telefon nömrəsi daxil edin.', 'max_length': 'Telefon nömrəsi ən çox 15 simvol olmalıdır.', 'null': 'Telefon nömrəsi sahəsi boş qala bilər.', 'unique': 'Bu telefon nömrəsi artıq götürülüb.'}, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Telefon nömrəsi '+994775685605' formatında olmalıdır.", regex='^\\+?[0-9]{9,20}$')])),
                ('area_of_use', models.CharField(blank=True, choices=[('mekteb', 'Məktəb'), ('universitet', 'Universitet'), ('senedler', 'Sənədlər'), ('blog', 'Blog'), ('tercume', 'Tərcümə'), ('marketinq', 'Marketinq')], default='mekteb', max_length=20)),
                ('daily_session', models.IntegerField(default=0, verbose_name='Günlük Sessiya')),
                ('is_blocked', models.BooleanField(default=False, verbose_name='Bloklanıb')),
                ('location_city', models.CharField(blank=True, choices=[('absheron', 'Abşeron'), ('agcabedi', 'Ağcabədi'), ('agdam', 'Ağdam'), ('agdash', 'Ağdaş'), ('agstafa', 'Ağstafa'), ('agsu', 'Ağsu'), ('astara', 'Astara'), ('baku', 'Bakı'), ('balaken', 'Balakən'), ('barda', 'Bərdə'), ('beylagan', 'Beyləqan'), ('bilasuvar', 'Biləsuvar'), ('dashkasan', 'Daşkəsən'), ('fuzuli', 'Füzuli'), ('gadabay', 'Gədəbəy'), ('ganja', 'Gəncə'), ('goranboy', 'Goranboy'), ('goychay', 'Göyçay'), ('goygol', 'Göygöl'), ('hajigabul', 'Hacıqabul'), ('imisli', 'İmişli'), ('ismayilli', 'İsmayıllı'), ('jabrayil', 'Cəbrayıl'), ('jalilabad', 'Cəlilabad'), ('kalbajar', 'Kəlbəcər'), ('khachmaz', 'Xaçmaz'), ('khizi', 'Xızı'), ('khojali', 'Xocalı'), ('kurdamir', 'Kürdəmir'), ('lachin', 'Laçın'), ('lankaran', 'Lənkəran'), ('lerik', 'Lerik'), ('masally', 'Masallı'), ('mingachevir', 'Mingəçevir'), ('nakhchivan', 'Naxçıvan'), ('neftchala', 'Neftçala'), ('oguz', 'Oğuz'), ('ordubad', 'Ordubad'), ('qabala', 'Qəbələ'), ('qakh', 'Qax'), ('qazakh', 'Qazax'), ('qusar', 'Qusar'), ('sabirabad', 'Sabirabad'), ('salyan', 'Salyan'), ('samukh', 'Samux'), ('shabran', 'Şabran'), ('shaki', 'Şəki'), ('shamakhi', 'Şamaxı'), ('shamkir', 'Şəmkir'), ('shirvan', 'Şirvan'), ('shusha', 'Şuşa'), ('siazan', 'Siyəzən'), ('sumqayit', 'Sumqayıt'), ('tartar', 'Tərtər'), ('tovuz', 'Tovuz'), ('yardimli', 'Yardımlı'), ('yevlakh', 'Yevlax'), ('zangilan', 'Zəngilan'), ('zardab', 'Zərdab')], max_length=50, null=True, verbose_name='Məkan (Rayon)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', accounts.models.MyUserManager()),
            ],
        ),
    ]
